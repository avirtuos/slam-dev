// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidar.proto

#ifndef PROTOBUF_lidar_2eproto__INCLUDED
#define PROTOBUF_lidar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class Greeting;
class GreetingDefaultTypeInternal;
extern GreetingDefaultTypeInternal _Greeting_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;

namespace protobuf_lidar_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_lidar_2eproto

// ===================================================================

class Greeting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Greeting) */ {
 public:
  Greeting();
  virtual ~Greeting();

  Greeting(const Greeting& from);

  inline Greeting& operator=(const Greeting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Greeting& default_instance();

  static inline const Greeting* internal_default_instance() {
    return reinterpret_cast<const Greeting*>(
               &_Greeting_default_instance_);
  }

  void Swap(Greeting* other);

  // implements Message ----------------------------------------------

  inline Greeting* New() const PROTOBUF_FINAL { return New(NULL); }

  Greeting* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Greeting& from);
  void MergeFrom(const Greeting& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Greeting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string greeting = 1;
  bool has_greeting() const;
  void clear_greeting();
  static const int kGreetingFieldNumber = 1;
  const ::std::string& greeting() const;
  void set_greeting(const ::std::string& value);
  #if LANG_CXX11
  void set_greeting(::std::string&& value);
  #endif
  void set_greeting(const char* value);
  void set_greeting(const char* value, size_t size);
  ::std::string* mutable_greeting();
  ::std::string* release_greeting();
  void set_allocated_greeting(::std::string* greeting);

  // @@protoc_insertion_point(class_scope:Greeting)
 private:
  void set_has_greeting();
  void clear_has_greeting();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr greeting_;
  friend struct  protobuf_lidar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  inline Point* New() const PROTOBUF_FINAL { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // required float distance = 3;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 3;
  float distance() const;
  void set_distance(float value);

  // required float angle = 4;
  bool has_angle() const;
  void clear_angle();
  static const int kAngleFieldNumber = 4;
  float angle() const;
  void set_angle(float value);

  // required bool end = 5;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 5;
  bool end() const;
  void set_end(bool value);

  // @@protoc_insertion_point(class_scope:Point)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_distance();
  void clear_has_distance();
  void set_has_angle();
  void clear_has_angle();
  void set_has_end();
  void clear_has_end();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  float distance_;
  float angle_;
  bool end_;
  friend struct  protobuf_lidar_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Greeting

// required string greeting = 1;
inline bool Greeting::has_greeting() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Greeting::set_has_greeting() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Greeting::clear_has_greeting() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Greeting::clear_greeting() {
  greeting_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_greeting();
}
inline const ::std::string& Greeting::greeting() const {
  // @@protoc_insertion_point(field_get:Greeting.greeting)
  return greeting_.GetNoArena();
}
inline void Greeting::set_greeting(const ::std::string& value) {
  set_has_greeting();
  greeting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Greeting.greeting)
}
#if LANG_CXX11
inline void Greeting::set_greeting(::std::string&& value) {
  set_has_greeting();
  greeting_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Greeting.greeting)
}
#endif
inline void Greeting::set_greeting(const char* value) {
  set_has_greeting();
  greeting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Greeting.greeting)
}
inline void Greeting::set_greeting(const char* value, size_t size) {
  set_has_greeting();
  greeting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Greeting.greeting)
}
inline ::std::string* Greeting::mutable_greeting() {
  set_has_greeting();
  // @@protoc_insertion_point(field_mutable:Greeting.greeting)
  return greeting_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Greeting::release_greeting() {
  // @@protoc_insertion_point(field_release:Greeting.greeting)
  clear_has_greeting();
  return greeting_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Greeting::set_allocated_greeting(::std::string* greeting) {
  if (greeting != NULL) {
    set_has_greeting();
  } else {
    clear_has_greeting();
  }
  greeting_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), greeting);
  // @@protoc_insertion_point(field_set_allocated:Greeting.greeting)
}

// -------------------------------------------------------------------

// Point

// required int32 x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:Point.x)
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Point.x)
}

// required int32 y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:Point.y)
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Point.y)
}

// required float distance = 3;
inline bool Point::has_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float Point::distance() const {
  // @@protoc_insertion_point(field_get:Point.distance)
  return distance_;
}
inline void Point::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:Point.distance)
}

// required float angle = 4;
inline bool Point::has_angle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Point::set_has_angle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Point::clear_has_angle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Point::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float Point::angle() const {
  // @@protoc_insertion_point(field_get:Point.angle)
  return angle_;
}
inline void Point::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:Point.angle)
}

// required bool end = 5;
inline bool Point::has_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Point::set_has_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Point::clear_has_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Point::clear_end() {
  end_ = false;
  clear_has_end();
}
inline bool Point::end() const {
  // @@protoc_insertion_point(field_get:Point.end)
  return end_;
}
inline void Point::set_end(bool value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:Point.end)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lidar_2eproto__INCLUDED
